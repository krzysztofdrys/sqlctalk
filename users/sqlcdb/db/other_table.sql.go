// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: other_table.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getBookForNewestUsers = `-- name: GetBookForNewestUsers :many

WITH newest_users AS (
    SELECT id, first_name, last_name, created_at, updated_at, tags, metadata FROM users
    WHERE created_at >= $1
) SELECT
      newest_users.id as user_id,
      books.id as book_id
      FROM newest_users JOIN books ON books.owner_user_id = newest_users.id
`

type GetBookForNewestUsersRow struct {
	UserID uuid.UUID
	BookID uuid.UUID
}

func (q *Queries) GetBookForNewestUsers(ctx context.Context, createdAt time.Time) ([]GetBookForNewestUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookForNewestUsers, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookForNewestUsersRow
	for rows.Next() {
		var i GetBookForNewestUsersRow
		if err := rows.Scan(&i.UserID, &i.BookID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
